<?php
/*
 * Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
 * Schema: testmsg.breeze
 * Date: 2019/8/9
 */

namespace Breeze\Test;

use Breeze\Breeze;
use Breeze\BreezeException;
use Breeze\BreezeReader;
use Breeze\BreezeWriter;
use Breeze\Buffer;
use Breeze\FieldDesc;
use Breeze\Message;
use Breeze\Schema;
use Breeze\Types\TypeInt32;
use Breeze\Types\TypeMessage;
use Breeze\Types\TypePackedArray;
use Breeze\Types\TypePackedMap;
use Breeze\Types\TypeString;

class TestMsg implements Message
{
    private static $schema;
    private static $_inited = false;
    private static $_myIntType;
    private static $_myStringType;
    private static $_myMapType;
    private static $_myArrayType;
    private static $_subMsgType;
    private static $_myEnumType;
    private static $_enumArrayType;

    private $myInt;
    private $myString;
    private $myMap;
    private $myArray;
    private $subMsg;
    private $myEnum;
    private $enumArray;

    public function __construct()
    {
        if (!self::$_inited) {
            self::$_myIntType = TypeInt32::instance();
            self::$_myStringType = TypeString::instance();
            self::$_myMapType = new TypePackedMap(TypeString::instance(), new TypeMessage(new TestSubMsg()));
            self::$_myArrayType = new TypePackedArray(new TypeMessage(new TestSubMsg()));
            self::$_subMsgType = new TypeMessage(new TestSubMsg());
            self::$_myEnumType = new TypeMessage(new MyEnum());
            self::$_enumArrayType = new TypePackedArray(new TypeMessage(new MyEnum()));
            self::$_inited = true;
        }
    }

    private function initSchema()
    {
        self::$schema = new Schema();
        self::$schema->setName('motan.TestMsg');
        self::$schema->putField(new FieldDesc(1, 'myInt', self::$_myIntType));
        self::$schema->putField(new FieldDesc(2, 'myString', self::$_myStringType));
        self::$schema->putField(new FieldDesc(3, 'myMap', self::$_myMapType));
        self::$schema->putField(new FieldDesc(4, 'myArray', self::$_myArrayType));
        self::$schema->putField(new FieldDesc(5, 'subMsg', self::$_subMsgType));
        self::$schema->putField(new FieldDesc(6, 'myEnum', self::$_myEnumType));
        self::$schema->putField(new FieldDesc(7, 'enumArray', self::$_enumArrayType));
    }

    public function writeTo(Buffer $buf)
    {
        BreezeWriter::writeMessage($buf, function (Buffer $funcBuf) {
            BreezeWriter::writeMessageField($funcBuf, 1, $this->myInt, self::$_myIntType);
            BreezeWriter::writeMessageField($funcBuf, 2, $this->myString, self::$_myStringType);
            BreezeWriter::writeMessageField($funcBuf, 3, $this->myMap, self::$_myMapType);
            BreezeWriter::writeMessageField($funcBuf, 4, $this->myArray, self::$_myArrayType);
            BreezeWriter::writeMessageField($funcBuf, 5, $this->subMsg, self::$_subMsgType);
            BreezeWriter::writeMessageField($funcBuf, 6, $this->myEnum, self::$_myEnumType);
            BreezeWriter::writeMessageField($funcBuf, 7, $this->enumArray, self::$_enumArrayType);
        });
    }

    public function readFrom(Buffer $buf)
    {
        BreezeReader::readMessage($buf, function (Buffer $funcBuf, $index) {
            switch ($index) {
                case 1:
                    $this->myInt = self::$_myIntType->read($funcBuf);
                    break;
                case 2:
                    $this->myString = self::$_myStringType->read($funcBuf);
                    break;
                case 3:
                    $this->myMap = self::$_myMapType->read($funcBuf);
                    break;
                case 4:
                    $this->myArray = self::$_myArrayType->read($funcBuf);
                    break;
                case 5:
                    $this->subMsg = self::$_subMsgType->read($funcBuf);
                    break;
                case 6:
                    $this->myEnum = self::$_myEnumType->read($funcBuf);
                    break;
                case 7:
                    $this->enumArray = self::$_enumArrayType->read($funcBuf);
                    break;
                default: //skip unknown field
                    BreezeReader::readValue($funcBuf);
            }
        });
    }

    public function defaultInstance()
    {
        return new TestMsg();
    }

    public function messageName()
    {
        return 'motan.TestMsg';
    }

    public function messageAlias()
    {
        return '';
    }

    public function schema()
    {
        if (is_null(self::$schema)) {
            $this->initSchema();
        }
        return self::$schema;
    }

    public function getMyInt()
    {
        return $this->myInt;
    }

    public function setMyInt($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myIntType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyInt');
        }
        $this->myInt = $value;
        return $this;
    }

    public function getMyString()
    {
        return $this->myString;
    }

    public function setMyString($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myStringType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyString');
        }
        $this->myString = $value;
        return $this;
    }

    public function getMyMap()
    {
        return $this->myMap;
    }

    public function setMyMap($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myMapType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyMap');
        }
        $this->myMap = $value;
        return $this;
    }

    public function getMyArray()
    {
        return $this->myArray;
    }

    public function setMyArray($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myArrayType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyArray');
        }
        $this->myArray = $value;
        return $this;
    }

    public function getSubMsg()
    {
        return $this->subMsg;
    }

    public function setSubMsg($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_subMsgType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setSubMsg');
        }
        $this->subMsg = $value;
        return $this;
    }

    public function getMyEnum()
    {
        return $this->myEnum;
    }

    public function setMyEnum($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myEnumType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyEnum');
        }
        $this->myEnum = $value;
        return $this;
    }

    public function getEnumArray()
    {
        return $this->enumArray;
    }

    public function setEnumArray($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_enumArrayType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setEnumArray');
        }
        $this->enumArray = $value;
        return $this;
    }
}
