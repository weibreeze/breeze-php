<?php
/*
 * Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
 * Schema: testmsg.breeze
 * Date: 2019/8/9
 */

namespace Breeze\Test;

use Breeze\BreezeException;
use Breeze\BreezeReader;
use Breeze\BreezeWriter;
use Breeze\Buffer;
use Breeze\FieldDesc;
use Breeze\Message;
use Breeze\Schema;
use Breeze\Types\TypeInt32;

class MyEnum implements Message
{
    const E1 = 1;
    const E2 = 2;
    const E3 = 3;
    private static $schema;
    private $enumValue;

    public function __construct($enumValue = 0)
    {
        if (!is_integer($enumValue)) {
            throw new BreezeException('enum number must be integer');
        }
        $this->enumValue = $enumValue;
    }

    public function value()
    {
        return $this->enumValue;
    }

    private function initSchema()
    {
        self::$schema = new Schema();
        self::$schema->setName('motan.MyEnum');
        self::$schema->putField(new FieldDesc(1, 'enumNumber', TypeInt32::instance()));
    }

    public function writeTo(Buffer $buf)
    {
        BreezeWriter::writeMessage($buf, function (Buffer $funcBuf) {
            BreezeWriter::writeMessageField($funcBuf, 1, $this->enumValue, TypeInt32::instance());
        });
    }

    public function readFrom(Buffer $buf)
    {
        BreezeReader::readMessage($buf, function (Buffer $funcBuf, $index) {
            switch ($index) {
                case 1:
                    $number = TypeInt32::instance()->read($funcBuf);
                    switch ($number) {
                        case 1:
                            $this->enumValue = self::E1;
                            break;
                        case 2:
                            $this->enumValue = self::E2;
                            break;
                        case 3:
                            $this->enumValue = self::E3;
                            break;
                        default:
                            throw new BreezeException('unknown enum number ' . $number);
                    }
                    break;
                default: // for compatibility
                    BreezeReader::readValue($funcBuf);
            }
        });
    }

    public function defaultInstance()
    {
        return new MyEnum();
    }

    public function getName()
    {
        return 'motan.MyEnum';
    }

    public function getAlias()
    {
        return '';
    }

    public function getSchema()
    {
        if (is_null(self::$schema)) {
            $this->initSchema();
        }
        return self::$schema;
    }

}
