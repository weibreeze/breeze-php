<?php
/*
 * Generated by breeze-generator (https://github.com/weibreeze/breeze-generator)
 * Schema: testmsg.breeze
 * Date: 2019/8/9
 */

namespace Breeze\Test;

use Breeze\Breeze;
use Breeze\BreezeException;
use Breeze\BreezeReader;
use Breeze\BreezeWriter;
use Breeze\Buffer;
use Breeze\FieldDesc;
use Breeze\Message;
use Breeze\Schema;
use Breeze\Types\TypeBool;
use Breeze\Types\TypeByte;
use Breeze\Types\TypeBytes;
use Breeze\Types\TypeFloat32;
use Breeze\Types\TypeFloat64;
use Breeze\Types\TypeInt32;
use Breeze\Types\TypeInt64;
use Breeze\Types\TypePackedArray;
use Breeze\Types\TypePackedMap;
use Breeze\Types\TypeString;

class TestSubMsg implements Message
{
    private static $schema;
    private static $_inited = false;
    private static $_myStringType;
    private static $_myIntType;
    private static $_myInt64Type;
    private static $_myFloat32Type;
    private static $_myFloat64Type;
    private static $_myByteType;
    private static $_myBytesType;
    private static $_myMap1Type;
    private static $_myMap2Type;
    private static $_myArrayType;
    private static $_myBoolType;

    private $myString;
    private $myInt;
    private $myInt64;
    private $myFloat32;
    private $myFloat64;
    private $myByte;
    private $myBytes;
    private $myMap1;
    private $myMap2;
    private $myArray;
    private $myBool;

    public function __construct()
    {
        if (!self::$_inited) {
            self::$_myStringType = TypeString::instance();
            self::$_myIntType = TypeInt32::instance();
            self::$_myInt64Type = TypeInt64::instance();
            self::$_myFloat32Type = TypeFloat32::instance();
            self::$_myFloat64Type = TypeFloat64::instance();
            self::$_myByteType = TypeByte::instance();
            self::$_myBytesType = TypeBytes::instance();
            self::$_myMap1Type = new TypePackedMap(TypeString::instance(), TypeBytes::instance());
            self::$_myMap2Type = new TypePackedMap(TypeInt32::instance(), new TypePackedArray(TypeInt32::instance()));
            self::$_myArrayType = new TypePackedArray(TypeInt32::instance());
            self::$_myBoolType = TypeBool::instance();
            self::$_inited = true;
        }
    }

    private function initSchema()
    {
        self::$schema = new Schema();
        self::$schema->setName('motan.TestSubMsg');
        self::$schema->putField(new FieldDesc(1, 'myString', self::$_myStringType));
        self::$schema->putField(new FieldDesc(2, 'myInt', self::$_myIntType));
        self::$schema->putField(new FieldDesc(3, 'myInt64', self::$_myInt64Type));
        self::$schema->putField(new FieldDesc(4, 'myFloat32', self::$_myFloat32Type));
        self::$schema->putField(new FieldDesc(5, 'myFloat64', self::$_myFloat64Type));
        self::$schema->putField(new FieldDesc(6, 'myByte', self::$_myByteType));
        self::$schema->putField(new FieldDesc(7, 'myBytes', self::$_myBytesType));
        self::$schema->putField(new FieldDesc(8, 'myMap1', self::$_myMap1Type));
        self::$schema->putField(new FieldDesc(9, 'myMap2', self::$_myMap2Type));
        self::$schema->putField(new FieldDesc(10, 'myArray', self::$_myArrayType));
        self::$schema->putField(new FieldDesc(11, 'myBool', self::$_myBoolType));
    }

    public function writeTo(Buffer $buf)
    {
        BreezeWriter::writeMessage($buf, function (Buffer $funcBuf) {
            BreezeWriter::writeMessageField($funcBuf, 1, $this->myString, self::$_myStringType);
            BreezeWriter::writeMessageField($funcBuf, 2, $this->myInt, self::$_myIntType);
            BreezeWriter::writeMessageField($funcBuf, 3, $this->myInt64, self::$_myInt64Type);
            BreezeWriter::writeMessageField($funcBuf, 4, $this->myFloat32, self::$_myFloat32Type);
            BreezeWriter::writeMessageField($funcBuf, 5, $this->myFloat64, self::$_myFloat64Type);
            BreezeWriter::writeMessageField($funcBuf, 6, $this->myByte, self::$_myByteType);
            BreezeWriter::writeMessageField($funcBuf, 7, $this->myBytes, self::$_myBytesType);
            BreezeWriter::writeMessageField($funcBuf, 8, $this->myMap1, self::$_myMap1Type);
            BreezeWriter::writeMessageField($funcBuf, 9, $this->myMap2, self::$_myMap2Type);
            BreezeWriter::writeMessageField($funcBuf, 10, $this->myArray, self::$_myArrayType);
            BreezeWriter::writeMessageField($funcBuf, 11, $this->myBool, self::$_myBoolType);
        });
    }

    public function readFrom(Buffer $buf)
    {
        BreezeReader::readMessage($buf, function (Buffer $funcBuf, $index) {
            switch ($index) {
                case 1:
                    $this->myString = self::$_myStringType->read($funcBuf);
                    break;
                case 2:
                    $this->myInt = self::$_myIntType->read($funcBuf);
                    break;
                case 3:
                    $this->myInt64 = self::$_myInt64Type->read($funcBuf);
                    break;
                case 4:
                    $this->myFloat32 = self::$_myFloat32Type->read($funcBuf);
                    break;
                case 5:
                    $this->myFloat64 = self::$_myFloat64Type->read($funcBuf);
                    break;
                case 6:
                    $this->myByte = self::$_myByteType->read($funcBuf);
                    break;
                case 7:
                    $this->myBytes = self::$_myBytesType->read($funcBuf);
                    break;
                case 8:
                    $this->myMap1 = self::$_myMap1Type->read($funcBuf);
                    break;
                case 9:
                    $this->myMap2 = self::$_myMap2Type->read($funcBuf);
                    break;
                case 10:
                    $this->myArray = self::$_myArrayType->read($funcBuf);
                    break;
                case 11:
                    $this->myBool = self::$_myBoolType->read($funcBuf);
                    break;
                default: //skip unknown field
                    BreezeReader::readValue($funcBuf);
            }
        });
    }

    public function defaultInstance()
    {
        return new TestSubMsg();
    }

    public function messageName()
    {
        return 'motan.TestSubMsg';
    }

    public function messageAlias()
    {
        return '';
    }

    public function schema()
    {
        if (is_null(self::$schema)) {
            $this->initSchema();
        }
        return self::$schema;
    }

    public function getMyString()
    {
        return $this->myString;
    }

    public function setMyString($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myStringType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyString');
        }
        $this->myString = $value;
        return $this;
    }

    public function getMyInt()
    {
        return $this->myInt;
    }

    public function setMyInt($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myIntType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyInt');
        }
        $this->myInt = $value;
        return $this;
    }

    public function getMyInt64()
    {
        return $this->myInt64;
    }

    public function setMyInt64($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myInt64Type->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyInt64');
        }
        $this->myInt64 = $value;
        return $this;
    }

    public function getMyFloat32()
    {
        return $this->myFloat32;
    }

    public function setMyFloat32($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myFloat32Type->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyFloat32');
        }
        $this->myFloat32 = $value;
        return $this;
    }

    public function getMyFloat64()
    {
        return $this->myFloat64;
    }

    public function setMyFloat64($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myFloat64Type->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyFloat64');
        }
        $this->myFloat64 = $value;
        return $this;
    }

    public function getMyByte()
    {
        return $this->myByte;
    }

    public function setMyByte($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myByteType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyByte');
        }
        $this->myByte = $value;
        return $this;
    }

    public function getMyBytes()
    {
        return $this->myBytes;
    }

    public function setMyBytes($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myBytesType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyBytes');
        }
        $this->myBytes = $value;
        return $this;
    }

    public function getMyMap1()
    {
        return $this->myMap1;
    }

    public function setMyMap1($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myMap1Type->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyMap1');
        }
        $this->myMap1 = $value;
        return $this;
    }

    public function getMyMap2()
    {
        return $this->myMap2;
    }

    public function setMyMap2($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myMap2Type->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyMap2');
        }
        $this->myMap2 = $value;
        return $this;
    }

    public function getMyArray()
    {
        return $this->myArray;
    }

    public function setMyArray($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myArrayType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyArray');
        }
        $this->myArray = $value;
        return $this;
    }

    public function getMyBool()
    {
        return $this->myBool;
    }

    public function setMyBool($value)
    {
        if (Breeze::$CHECK_VALUE && !self::$_myBoolType->checkType($value)) {
            throw new BreezeException('check type fail. method:' . $this->messageName() . '->setMyBool');
        }
        $this->myBool = $value;
        return $this;
    }
}
